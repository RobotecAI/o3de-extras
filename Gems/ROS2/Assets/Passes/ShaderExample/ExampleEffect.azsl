#pragma once

#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>
#include <Atom/Features/SrgSemantics.azsli>

ShaderResourceGroup MyMaterialSrg : SRG_PerDraw
{
}

struct VertexShaderInput
{
    float3 m_position : POSITION;
    float3 m_color : COLOR;
};

struct VertexShaderOutput
{
    float4 m_position : SV_Position;
};

VertexShaderOutput MainVS(VertexShaderInput IN)
{
    VertexShaderOutput OUT;

    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1)).xyz;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));   
  
    return OUT;
}

ForwardPassOutput MainPS(VertexShaderOutput IN)
{
    float currentTime = SceneSrg::m_time;
    ForwardPassOutput OUT;

    // OUT.m_diffuseColor = float4(0,0,0,1); // Subsurface scattering is disabled
    // OUT.m_specularColor = float4(0.0, 0.0, 0.0, 0.0);   // Disable specular lighting

    // OUT.m_diffuseColor.x=sin(currentTime); 
    float3 color = float3(0.5, 0.5, 0.5);
    OUT.m_diffuseColor = float4(color, 1.0);

    return OUT;
}
